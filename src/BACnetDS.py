#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        BACnetDS.py
#
#  Project :     BACnetDS
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      kitka.wojciech$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["BACnetDS", "BACnetDSClass", "main"]

__docformat__ = 'restructuredtext'

import tango
import sys
# Add additional import
#----- PROTECTED REGION ID(BACnetDS.additionnal_import) ENABLED START -----#
import time
from bacpypes.core import run, stop
from bacpypes.local.device import LocalDeviceObject
from .bacnet_app import ReadWriteApplication, deferred
#----- PROTECTED REGION END -----#	//	BACnetDS.additionnal_import

# Device States Description
# ON : 
# OFF : 
# FAULT :

class BACnetDS (tango.Device_4Impl):
    """DS for communicating with devices via BACnet IP protocol."""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(BACnetDS.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	BACnetDS.global_variables

    def __init__(self, cl, name):
        tango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        BACnetDS.init_device(self)
        #----- PROTECTED REGION ID(BACnetDS.__init__) ENABLED START -----#
        try:
            self.BACnet_device = LocalDeviceObject(
                objectName=str(self.ObjectName),
                objectIdentifier=int(self.ObjectIdentifier),
                maxApduLengthAccepted=int(self.MaxApduLengthAccepted),
                segmentationSupported=str(self.SegmentationSupported),
                vendorIdentifier=0,
            )
            self.points_list = []
            for addr, BACnet_type, instance, BACnet_property in zip(self.device_ip, self.device_type,
                                                                    self.device_instance, self.device_properties):
                self.points_list.append((addr, BACnet_type, instance, BACnet_property))
            self.BACnet_application = ReadWriteApplication(self.points_list, self.BACnet_device, str(self.IP))
            services_supported = self.BACnet_application.get_services_supported()
            self.BACnet_device.protocolServicesSupported = services_supported.value
        except Exception as e:
            print("In __init_", e)

        #----- PROTECTED REGION END -----#	//	BACnetDS.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(BACnetDS.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	BACnetDS.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        #----- PROTECTED REGION ID(BACnetDS.init_device) ENABLED START -----#
        try:
            self.set_status('Initialisation.')
            self.values_dictionary = dict()
            self.device_properties = list()
            self.device_ip = list()
            self.device_instance = list()
            self.device_type = list()
            self.properties_with_write = list()
            self.property_data_type = list()
            for line in self.Properties:
                if not 'write=True' in line:
                    self.properties_with_write.append(False)
                if not 'data_type=' in line:
                    self.property_data_type.append('CharacterString')
                for word in line.split(';'):
                    if 'property_name=' in word:
                        att_name = word.split('=')[1]
                        self.device_properties.append(att_name)
                    elif 'ip_address=' in word:
                        ip_address = word.split('=')[1]
                        self.device_ip.append(ip_address)
                    elif 'BACnet_type=' in word:
                        BACnet_type = word.split('=')[1]
                        self.device_type.append(BACnet_type)
                    elif 'instance=' in word:
                        instance = word.split('=')[1]
                        self.device_instance.append(instance)
                    elif 'write=True' in word:
                        self.properties_with_write.append(True)
                    elif 'data_type=' in word:
                        data_type = word.split('=')[1]
                        self.property_data_type.append(data_type)
                try:
                    dict_key = str(att_name) + ' at ' + str(instance)
                    self.values_dictionary[dict_key] = 0
                except Exception as e:
                    print(e)

            self.readout_time = time.time()
            self.set_state(tango.DevState.ON)
            self.set_status('Device is in ON state.')
        except Exception as e:
            print("In init_device()", e)
        #----- PROTECTED REGION END -----#	//	BACnetDS.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(BACnetDS.always_executed_hook) ENABLED START -----#
        try:
            if len(self.points_list) == 0:
                self.points_list = []
                for addr, BACnet_type, instance, BACnet_property in zip(self.device_ip, self.device_type,
                                                                        self.device_instance, self.device_properties):
                    self.points_list.append((addr, BACnet_type, instance, BACnet_property))
            read_time = time.time()
            if read_time - self.readout_time > 10:
                self.BACnet_application.refresh_points_list(self.points_list)
                self.BACnet_application.response_values = []
                deferred(self.BACnet_application.read_request)
                run()
                for request, response in zip(self.points_list, self.BACnet_application.response_values):
                    for dev, instance in zip(self.device_properties, self.device_instance):
                        if dev in request and instance in request:
                            value = response
                            dict_key = str(dev) + ' at ' + str(instance)
                            self.values_dictionary[dict_key] = str(value)
                self.readout_time = time.time()
                stop()
            else:
                pass
        except Exception as e:
            print("In always_excuted_hook()", e)
        #----- PROTECTED REGION END -----#	//	BACnetDS.always_executed_hook

    # -------------------------------------------------------------------------
    #    BACnetDS read/write attribute methods
    # -------------------------------------------------------------------------
    def read_bacnet(self, attr):
        """General method for reading attribute"""
        try:
            attr_name = attr.get_name()
            value = str(self.values_dictionary[attr_name])
            attr.set_value(value)
        except Exception as e:
            print('read_bacnet', e)

    def write_bacnet(self, attr):
        """General method for writing attribute"""
        try:
            attr_name = attr.get_name()
            prop_id = attr_name.split(' ')[0]
            obj_inst = attr_name.split(' ')[2]
            for dev_prop_it, instance_it, it in zip(self.device_properties, self.device_instance,
                                                    list(range(0, len(self.device_instance)))):
                if prop_id == dev_prop_it and instance_it == obj_inst:
                    dev_index = it
                    addr = self.device_ip[dev_index]
                    obj_type = self.device_type[dev_index]
                    datatype = self.property_data_type[dev_index]
                    data = attr.get_write_value()
                    deferred(self.BACnet_application.write_request(addr, obj_type, obj_inst, prop_id, datatype, data))
                    run()
                    break
        except Exception as e:
            print('write_bacnet', e)

    def is_bacnet_allowed(self, attr):
        return self.get_state() != tango.DevState.FAULT

    def initialize_dynamic_attributes(self):
        self.debug_stream("In initialize_dynamic_attributes()")
        try:
            for dev, instance, writable, data_type in zip(self.device_properties, self.device_instance,
                                                          self.properties_with_write, self.property_data_type):
                attr_name = str(dev) + ' at ' + str(instance)
                if data_type.lower() == 'integer':
                    tango_type = tango.DevLong
                elif data_type.lower() == 'real':
                    tango_type = tango.DevFloat
                elif data_type.lower() == 'bitstring':
                    tango_type = tango.DevBoolean
                else:
                    tango_type = tango.DevString
                prop = tango.UserDefaultAttrProp()
                if writable == False:
                    attr = tango.Attr(attr_name, tango_type, tango.READ)
                    attr.set_default_properties(prop)
                    attr.set_polling_period(3000)
                    self.add_attribute(attr,
                                       r_meth=self.read_bacnet,
                                       is_allo_meth=self.is_bacnet_allowed)
                    self.set_change_event(attr_name, True, True)
                else:
                    attr = tango.Attr(attr_name, tango_type, tango.READ_WRITE)
                    attr.set_default_properties(prop)
                    attr.set_polling_period(3000)
                    self.add_attribute(attr,
                                       r_meth=self.read_bacnet,
                                       w_meth=self.write_bacnet,
                                       is_allo_meth=self.is_bacnet_allowed)
                    self.set_change_event(attr_name, True, True)
        except Exception as e:
            print("In initialize_dynamic_attributes()", e)

    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(BACnetDS.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	BACnetDS.read_attr_hardware


    # -------------------------------------------------------------------------
    #    BACnetDS command methods
    # -------------------------------------------------------------------------
    

    #----- PROTECTED REGION ID(BACnetDS.programmer_methods) ENABLED START -----#


    #----- PROTECTED REGION END -----#	//	BACnetDS.programmer_methods

class BACnetDSClass(tango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(BACnetDS.global_class_variables) ENABLED START -----#
    def dyn_attr(self, dev_list):
        """Invoked to create dynamic attributes for the given devices.
        Default implementation calls
        :meth:`BACnetDS.initialize_dynamic_attributes` for each device

        :param dev_list: list of devices
        :type dev_list: :class:`tango.DeviceImpl`"""

        for dev in dev_list:
            try:
                dev.initialize_dynamic_attributes()
            except:
                import traceback
                dev.warn_stream("Failed to initialize dynamic attributes")
                dev.debug_stream("Details: " + traceback.format_exc())
    #----- PROTECTED REGION END -----#	//	BACnetDS.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'IP':
            [tango.DevString, 
             "Example:\n192.168.18.177/24",
            [] ],
        'ObjectName':
            [tango.DevString, 
             '',
            [] ],
        'ObjectIdentifier':
            [tango.DevString, 
             '',
            [] ],
        'Properties':
            [tango.DevVarStringArray, 
            "Example:\nip_address=192.168.118.17/24;BACnet_type=8;instance=2184450;property_name=location;write=True;data_type=CharacterString",
            [] ],
        'MaxApduLengthAccepted':
            [tango.DevFloat, 
             '',
            [] ],
        'SegmentationSupported':
            [tango.DevString, 
             '',
            [] ],
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        }


def main():
    try:
        py = tango.Util(sys.argv)
        py.add_class(BACnetDSClass, BACnetDS, 'BACnetDS')
        #----- PROTECTED REGION ID(BACnetDS.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	BACnetDS.add_classes

        U = tango.Util.instance()
        U.server_init()
        U.server_run()

    except tango.DevFailed as e:
        print(('-------> Received a DevFailed exception:', e))
    except Exception as e:
        print(('-------> An unforeseen exception occured....', e))

if __name__ == '__main__':
    main()
